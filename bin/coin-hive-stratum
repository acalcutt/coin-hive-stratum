#!/usr/bin/env node
"use strict";
const Proxy = require("../build");
const express = require("express");
const fs = require("fs");
const argv = require("minimist")(process.argv.slice(2));
const defaults = require("../config/defaults");

function help() {
  const text = fs.createReadStream(`${__dirname}/help`);
  text.pipe(process.stderr);
  text.on("close", () => process.exit(1));
}

if (argv.help || argv.h) {
  help();
  return;
}

const port = argv._[0];
const key = argv.key;
const cert = argv.cert;
const isHTTPS = !!(key && cert);

const options = {
  host: argv.host || defaults.host,
  pass: argv.pass || defaults.pass,
  port: argv.port || defaults.port,
  ssl: argv.hasOwnProperty("ssl") || defaults.ssl,
  address: argv.address || defaults.address,
  user: argv.user || defaults.user,
  diff: argv.diff || defaults.diff,
  dynamicPool: argv.hasOwnProperty("dynamic-pool") || defaults.dynamicPool,
  maxMinersPerConnection: argv["max-miners-per-connection"] || defaults.maxMinersPerConnection
};

// server
const app = express();
const protocol = isHTTPS ? "https" : "http";
const serverOptions = isHTTPS
  ? {
      key: fs.readFileSync(key),
      cert: fs.readFileSync(cert)
    }
  : app;

// stats
if (argv.hasOwnProperty("stats")) {
  app.use("/stats", (req, res) => res.json(proxy.getStats()));
  const statsServer = require(protocol).createServer(serverOptions, app);
  statsServer.listen(port + 1);
}

// websockets
const websocketServer = require(protocol).createServer(serverOptions);
websocketServer.listen(port);
console.log(`listening on port ${port}` + (isHTTPS ? ", using a secure connection" : ""));

// proxy
const proxy = new Proxy(options);
proxy.listen({
  server: websocketServer
});

// handle errors
process.on("unhandledRejection", function(e) {
  console.error("An error occured", e.message);
  process.exit(1);
});
